# Group MeetingRelayResults

## MeetingRelayResult details [/api/v3/meeting_relay_result/{id}]

+ Model (application/json)

        {
            "id": 33825,
            "lock_version": 0,
            "created_at": "2018-11-22T00:00:00.000Z",
            "updated_at": "2018-11-22T00:00:00.000Z",
            "rank": 3,
            "play_off": false,
            "out_of_race": false,
            "disqualified": false,
            "standard_points": "0.0",
            "meeting_points": "18.0",
            "minutes": 4,
            "seconds": 20,
            "hundreds": 10,
            "team_id": 1,
            "meeting_program_id": 149877,
            "disqualification_code_type_id": null,
            "relay_header": "CSInuoto OberFerrari",
            "reaction_time": "0.0",
            "entry_minutes": null,
            "entry_seconds": null,
            "entry_hundreds": null,
            "team_affiliation_id": 5107,
            "entry_time_type_id": null,

            "meeting": {
                "id": 18101,
                "code": "csiprova1",
                "header_year": "2018/2019",
                "edition_label": "2018/2019"
            },

            "meeting_session": {
                "id": 3004,
                "session_order": 1,
                "scheduled_date": "2018-11-18"
            },

            "meeting_program": {
                "id": 149877,
                "event_order": 6,
                "category_type_id": 1219,
                "gender_type_id": 1,
                "autofilled": false,
                "out_of_race": false,
                "begin_time": null,
                "meeting_event_id": 18415,
                "pool_type_id": 1,
                "time_standard_id": null,

                "pool_type": {
                    "id": 1,
                    "code": "25",
                    "length_in_meters": 25,
                    "eventable": true,
                    "label": "25 M",
                    "long_label": "25 METERS",
                    "alt_label": "25 M"
                },
                "event_type": {
                    "id": 27,
                    "code": "S4X100SL",
                    "length_in_meters": 400,
                    "relay": true,
                    "stroke_type_id": 1,
                    "style_order": 27,
                    "mixed_gender": false,
                    "partecipants": 4,
                    "phases": 4,
                    "phase_length_in_meters": 100,
                    "label": "4x100 FS",
                    "long_label": "4x100 FREESTYLE RELAY",
                    "alt_label": "4x100 FS"
                },
                "category_type": {
                    "id": 1219,
                    "code": "160-199",
                    "federation_code": "x3",
                    "description": "STAFF. M 160-199",
                    "short_name": "160-199",
                    "group_name": "MASTER",
                    "age_begin": 160,
                    "age_end": 199,
                    "relay": true,
                    "season_id": 181,
                    "out_of_race": false,
                    "undivided": false
                },

                "gender_type": {
                    "id": 1,
                    "code": "M",
                    "label": "MAL",
                    "long_label": "MALE",
                    "alt_label": "MALE"
                },
                "stroke_type": {
                    "id": 1,
                    "code": "SL",
                    "eventable": true,
                    "label": "FS",
                    "long_label": "FREESTYLE",
                    "alt_label": "CR"
                }
            },

            "pool_type": {
                "id": 1,
                "code": "25",
                "length_in_meters": 25,
                "eventable": true,
                "label": "25 M",
                "long_label": "25 METERS",
                "alt_label": "25 M"
            },

            "event_type": {
                "id": 27,
                "code": "S4X100SL",
                "length_in_meters": 400,
                "relay": true,
                "stroke_type_id": 1,
                "style_order": 27,
                "mixed_gender": false,
                "partecipants": 4,
                "phases": 4,
                "phase_length_in_meters": 100,
                "label": "4x100 FS",
                "long_label": "4x100 FREESTYLE RELAY",
                "alt_label": "4x100 FS"
            },

            "category_type": {
                "id": 1219,
                "code": "160-199",
                "federation_code": "x3",
                "description": "STAFF. M 160-199",
                "short_name": "160-199",
                "group_name": "MASTER",
                "age_begin": 160,
                "age_end": 199,
                "relay": true,
                "season_id": 181,
                "out_of_race": false,
                "undivided": false
            },

            "gender_type": {
                "id": 1,
                "code": "M",
                "label": "MAL",
                "long_label": "MALE",
                "alt_label": "MALE"
            },

            "meeting_relay_swimmers": [
                {
                    "id": 1873,
                    "relay_order": 1,
                    "swimmer_id": 1406,
                    "badge_id": 110715,
                    "stroke_type_id": 1,
                    "reaction_time": "0.0",
                    "minutes": 1,
                    "seconds": 3,
                    "hundreds": 56,
                    "meeting_relay_result_id": 33825
                },
                {
                    "id": 1874,
                    "relay_order": 2,
                    "swimmer_id": 97,
                    "badge_id": 110751,
                    "stroke_type_id": 1,
                    "reaction_time": "0.0",
                    "minutes": 1,
                    "seconds": 6,
                    "hundreds": 40,
                    "meeting_relay_result_id": 33825
                },
                {
                    "id": 1875,
                    "relay_order": 3,
                    "swimmer_id": 1227,
                    "badge_id": 110749,
                    "stroke_type_id": 1,
                    "reaction_time": "0.0",
                    "minutes": 1,
                    "seconds": 2,
                    "hundreds": 10,
                    "meeting_relay_result_id": 33825
                },
                {
                    "id": 1876,
                    "relay_order": 4,
                    "swimmer_id": 6681,
                    "badge_id": 111385,
                    "stroke_type_id": 1,
                    "reaction_time": "0.0",
                    "minutes": 1,
                    "seconds": 8,
                    "hundreds": 4,
                    "meeting_relay_result_id": 33825
                }
            ]
        }


### find [GET]
The MeetingRelayResult instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities (some with minimal attributes):
- `Meeting`
- `MeetingSession`
- `MeetingProgram`
- `TeamAffiliation`
- `PoolType`
- `EventType`
- `CategoryType`
- `GenderType`
- list of `MeetingRelaySwimmer`s (linking to an actual `Swimmer` instance)

Some of the sub-entities (such as the GenderType) are duplicated in the hierachy tree for ease of
reference.

:key: `Authorization` request header => valid JWT **required**


* * *


+ Parameters
    + id: 38648 (number, required) - MeetingRelayResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_result/38648"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_result/38648',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT" }
            )
    => <RestClient::Response 200 "{\"id\":38648, ...">
    ```


    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingRelayResult details][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request no JWT (application/json)

+ Response 401 (application/json)


    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



## edit [PUT]

Allows direct updates for most of the MeetingRelayResult fields given the `id` of the row.

Returns `true` on success, an empty result when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelayResult' or have generic admin grants


#### Body Attributes:

All are optional (except `id`):

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_program_id` | integer | associated MeetingProgram ID |
| `team_affiliation_id` | integer | associated TeamAffiliation ID |
| `team_id` | integer | associated Team ID |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | result time minutes |
| `seconds` | integer | result time seconds |
| `hundreds` | integer | result time hundredths of seconds |
| `play_off` | boolean | `true` if this result refers to a play-off at the end or after the end of a season (standard play otherwise) |
| `out_of_race` | boolean | `true` if this result does not concur in the overall rankings or scores |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |
| `relay_header` | string | descriptive code or number used whenever the same team has registered more than one relay |
| `entry_time_type_id` | integer | associated EntryTimeType ID for the entry time |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `P`: personal |
| | 3 | `G`: GoggleCup |
| | 4 | `A`: preceding year |
| | 5 | `U`: last race |
| `entry_minutes` | integer | minutes for the registration entry time |
| `entry_seconds` | integer | seconds for the registration entry time |
| `entry_hundreds` | integer | hundredths of seconds for the registration entry time |


* * *


+ Parameters
    + id: 33825 (number, required) - MeetingRelayResult ID


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X PUT -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            -d '{"rank": 4, "minutes": 5, "seconds": 45, "hundreds": 60 }' \
            "<API_HOST:PORT>/api/v3/meeting_relay_result/33825"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :put,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_result/33825',
                payload: {
                    rank: 4,
                    minutes: 5,
                    seconds: 45,
                    hundreds: 60
                },
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundreds": 60
            }

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundreds": 60
            }

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundreds": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundreds": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

            {
                "rank": 4,
                "minutes": 5,
                "seconds": 45,
                "hundreds": 60
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



### create [POST]

Creates a new MeetingRelayResult, given the specified body parameters.

Returns a result text 'msg' on success, plus the 'new' row as JSON.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelayResult' or have generic admin grants


#### Body Attributes:

|  Field name  | Data type |  description |
| --- | --- | --- |
| `meeting_program_id` | integer | **required**, associated MeetingProgram ID |
| `team_affiliation_id` | integer | **required**, associated TeamAffiliation ID |
| `team_id` | integer | **required**, associated Team ID |
| `reaction_time` | float | reaction time (when available; must be positive to be considered) |
| `minutes` | integer | result time minutes |
| `seconds` | integer | result time seconds |
| `hundreds` | integer | result time hundredths of seconds |
| `play_off` | boolean | `true` if this result refers to a play-off at the end or after the end of a season (standard play otherwise) |
| `out_of_race` | boolean | `true` if this result does not concur in the overall rankings or scores |
| `rank` | integer | final heat rank (1+) for this result; usually 0 when disqualified |
| `standard_points` | float | result score computed using standard rules of this Championship |
| `meeting_points` | float | result score computed with meeting-specific rules |
| `disqualified` | boolean | `true` if the swimmer has been disqualified; has precedence over `DisqualificationCodeType` |
| `disqualification_code_type_id` | integer | GET `/lookup/disqualification_code_type` => list of supported values |
| `relay_header` | string | descriptive code or number used whenever the same team has registered more than one relay |
| `entry_time_type_id` | integer | associated EntryTimeType ID for the entry time |
| | _id_ | _code: description_ |
| | 1 | `M`: manual |
| | 2 | `P`: personal |
| | 3 | `G`: GoggleCup |
| | 4 | `A`: preceding year |
| | 5 | `U`: last race |
| `entry_minutes` | integer | minutes for the registration entry time |
| `entry_seconds` | integer | seconds for the registration entry time |
| `entry_hundreds` | integer | hundredths of seconds for the registration entry time |


* * *


+ Attributes
    + meeting_program_id (number, required) - associated MeetingProgram ID
    + team_affiliation_id (number, required) - associated TeamAffiliation ID
    + team_id (number, required) - associated Team ID
    + reaction_time (number, optional)
    + minutes (number, optional)
    + seconds (number, optional)
    + hundreds (number, optional)
    + play_off (boolean, optional)
    + out_of_race (boolean, optional)
    + rank (number, optional)
    + standard_points (number, optional)
    + meeting_points (number, optional)
    + disqualified (boolean, optional)
    + disqualification_code_type_id (number, optional)
    + relay_header (string, optional) - (Relay entry part)
    + entry_time_type_id (number, optional) - (Relay entry part)
    + entry_minutes (number, optional) - (Relay entry part)
    + entry_seconds (number, optional) - (Relay entry part)
    + entry_hundreds (number, optional) - (Relay entry part)


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X POST -H "Content-Type: application/json" \
            -d '{"meeting_program_id": 168301, "team_affiliation_id": 12178, "team_id": 9197, \
                 "rank": 5, "minutes": 1, "seconds": 15, "hundreds": 97}'
            "<API_HOST:PORT>/api/v3/meeting_relay_result"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient.post('<API_HOST:PORT>/api/v3/meeting_relay_result',
            {
                'meeting_program_id': 168301,
                'team_affiliation_id': 12178,
                'team_id': 9197,
                'rank': 5,
                'minutes': 1,
                'seconds': 15,
                'hundreds': 97
            } )
    => <RestClient::Response 201 "{\"msg\":\"OK\",\"new\":{\"id\":...">

    > puts res.body
    {"msg":"OK","new":<NEW_ROW_AS_JSON>}
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'meeting_program_id': 168301,
                'team_affiliation_id': 12178,
                'team_id': 9197,
                'rank': 5,
                'minutes': 1,
                'seconds': 15,
                'hundreds': 97
            }

+ Response 200 (application/json)

        {
            "msg": "OK",
            "new": "NEW_ROW_AS_JSON"
        }


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

    + Body

            {
                'meeting_program_id': 168301,
                'team_affiliation_id': 12178,
                'team_id': 9197,
                'rank': 5,
                'minutes': 1,
                'seconds': 15,
                'hundreds': 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

    + Body

            {
                'meeting_program_id': 168301,
                'team_affiliation_id': 12178,
                'team_id': 9197,
                'rank': 5,
                'minutes': 1,
                'seconds': 15,
                'hundreds': 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

    + Body

            {
                'meeting_program_id': 168301,
                'team_affiliation_id': 12178,
                'team_id': 9197,
                'rank': 5,
                'minutes': 1,
                'seconds': 15,
                'hundreds': 97
            }

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



## delete [DELETE]

Allows the deletion of individual rows, given their `id`.

Returns `true` on success, an empty body when not found.

:key: => satisfy both conditions:
1. `Authorization` request header => valid JWT **required**
2. authenticated user must have CRUD grant on 'MeetingRelayResult' or have generic admin grants


#### Body Attributes:

+ Parameters
    + id: 38649 (number, required) - MeetingRelayResult ID of the row that has to be deleted


+ Request ok (application/json)

    #### Examples

    ##### `curl` (Bash):

    ```bash
    $> curl -i -X DELETE -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_result/38649"
    ```

    ##### `RestClient` (Ruby):

    ```ruby
    > res = RestClient::Request.execute(
                method: :delete,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_result/38649',
                headers: { "Authorization" => "Bearer VALID-SESSION-JWT"}
            )
    => <RestClient::Response 200 "true">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        true


+ Request not found (application/json)

    The row for the specified ID must be existing in order to be edited.

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no grant (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid User grants"

    + Body

            { "msg": "Unauthorized" }



# MeetingRelayResult list [/api/v3/meeting_relay_results{?page,per_page,meeting_program_id,team_affiliation_id,team_id,swimmer_id,badge_id}]

+ Model (application/json)

    + Header

            Link: "<API_HOST:PORT/api/v3/meeting_relay_results?page=2&team_id=1>; rel=\"last\", <http://localhost:3000/api/v3/meeting_relay_results?page=2&team_id=1>; rel=\"next\""
            Total: 466
            Per-Page: 25
            Page: 1

    + Body

            [
                // MeetingRelayResult details 1
                {
                    "id": 16,
                    // [...]
                },

                // MeetingRelayResult details 2
                {
                    "id": 26,
                    // [...]
                },

                // [...]
            ]


## list [GET]

The list of MeetingRelayResults associated to the specified filtering values,
returned as JSON and optionally filtered by any or all from:

- `meeting_program_id`
- `team_affiliation_id`
- `team_id`

Returns exact matches for all the parameters.

Optional pagination parameters for the request:

- `page`: current/selected page cursor
- `per_page`: total items per data page (default: 25)

:key: `Authorization` request header => valid JWT **required**

### Pagination

Pagination links will be returned in the `Link` _response header_, for all arrays with
more than 25 results.

Typical `Link` header format (single String, separated by COMMA+BLANK):

    "<REQ_URL_FOR_NEXT_PAGE>; rel=\"next\", <REQ_URL_FOR_LAST_PAGE>; rel=\"last\""


* * *


+ Parameters
    + meeting_program_id: 5325 (number, optional) - associated MeetingProgram ID
    + team_affiliation_id: 101 (number, optional) - associated TeamAffiliation ID
    + team_id: 1 (number, optional) - associated Team ID
    + page: 1 (number, optional) - pagination: selected page
        + Default: 1
    + per_page: 25 (number, optional) - pagination: desired total rows per page
        + Default: 25


+ Request ok (application/json)

    ### Examples

    #### `curl` (Bash):

    ```bash
    $> curl -i -X GET -H "Content-Type: application/json" \
            -H 'Authorization: "Bearer VALID-SESSION-JWT"' \
            "<API_HOST:PORT>/api/v3/meeting_relay_results?team_id=1"
    ```

    #### `RestClient` (Ruby):

    _(Note that due to how the current version of RestClient handles the actual query parameters of the request,
    the `params` hash needs to be specified inside the `headers` hash.)_

    ```ruby
    > res = RestClient::Request.execute(
                method: :get,
                url: '<API_HOST:PORT>/api/v3/meeting_relay_results',
                headers: {
                    "Authorization" => "Bearer VALID-SESSION-JWT",
                    params: { team_id: 1 }
                }
            )
    => <RestClient::Response 200 "[{\"id\":1,...">
    ```

    * * *

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200

    [MeetingRelayResult list][]


+ Request not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        []


+ Request bad JWT (application/json)

    All JWTs expire: see [Session API docs](#sessions-session-post) for info.

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }


+ Request no JWT (application/json)

+ Response 401 (application/json)
