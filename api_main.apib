FORMAT: 1A
HOST: http://master-goggles.org

# Goggles 'core7' API
Backend internal API for the Goggles Engine, core7.
Current available version: `v1`


# Group session

- :[Session](blueprint/session.apib)

<!-- include(blueprint/session.apib) -->


# Group badge

## Badge [/api/v1/badge/{id}]

### Badge details [GET]
The Badge instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `Swimmer`
- `TeamAffiliation`
- `Season`
- `Team`
- `CategoryType`
- `EntryTimeType`

A valid JWT value is required for the `Authorization` request header.

+ Parameters
    + id (number) - Badge ID

+ Request ok (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "id": 124947,
            "number": "04204788",
            "season_id": 191,
            "swimmer_id": 142,
            "team_id": 1,
            "category_type_id": 1320,
            // [...]
            "created_at": "2019-10-16T00:00:00.000Z",
            "updated_at": "2019-10-16T00:00:00.000Z",
            "entry_time_type_id": 5,
            "team_affiliation_id": 5727,
            "final_rank": null,
            "is_out_of_goggle_cup": false,
            "has_to_pay_fees": false,
            "has_to_pay_badge": false,
            "has_to_pay_relays": false,

            // Embedded associated Swimmer:
            "swimmer": {
                "id": 142,
                "lock_version": 1,
                "last_name": "ALLORO",
                "first_name": "STEFANO",
                "year_of_birth": 1969,
                "phone_mobile": null,
                "phone_number": null,
                "e_mail": null,
                "nickname": "",
                "associated_user_id": 1,
                "gender_type_id": 1,
                // [...]
                "complete_name": "ALLORO STEFANO",
                "is_year_guessed": false
            },

            // Embedded associated TeamAffiliation:
            "team_affiliation": {
                "id": 5727,
                "number": "04200002",
                "name": "CSInuoto OberFerrari",
                "must_calculate_goggle_cup": true,
                "team_id": 1,
                "season_id": 191,
                // [...]
                "is_autofilled": false
            },

            // Embedded associated Season:
            "season": {
                "id": 191,
                // [...]
                "description": "Circuito regionale Emilia master CSI 2019/2020",
                "begin_date": "2019-10-01",
                "end_date": "2020-09-30",
                "season_type_id": 2,
                "created_at": "2019-10-16T07:20:51.000Z",
                "updated_at": "2019-10-16T07:20:51.000Z",
                "header_year": "2019/2020",
                "edition": 20,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "has_individual_rank": true,
                "badge_fee": "10.0"
            },
            "team": {
                "id": 1,
                // [...]
                "created_at": "2014-10-19T00:00:00.000Z",
                "updated_at": "2014-10-19T16:04:16.000Z",
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "CSI NUOTO OBER FERRARI ASD",
                "address": "Team HQ address",
                "zip": "",
                "phone_mobile": "",
                "phone_number": "",
                "fax_number": null,
                "e_mail": "contact.email@this.is.just.a.fake.domain.com",
                "contact_name": "Marco Ligabue",
                "notes": "whatever the team manager needs to write here",
                "name_variations": null,
                "city_id": 37,
                // [...]
                "home_page_url": "",
            },
            "category_type": {
                "id": 1320,
                // [...]
                "code": "M50",
                "federation_code": "8",
                "description": "MASTER 50",
                "short_name": "M50",
                "group_name": "MASTER",
                "age_begin": 50,
                "age_end": 54,
                "is_a_relay": false,
                // [...]
                "season_id": 191,
                "is_out_of_race": false,
                "is_undivided": false
            },
            "entry_time_type": {
                "id": 5,
                "code": "U",
                // [...]
            }
        }

+ Request ID not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request JWT missing (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



# Group swimmer

## Swimmer [/api/v1/swimmer/{id}]

### Swimmer details [GET]
The Swimmer instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `User`, the `associated_user` for this Swimmer
- `GenderType`

A valid JWT value is required for the `Authorization` request header.

+ Parameters
    + id (number) - Swimmer ID

+ Request ok (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "id": 142,
            "last_name": "ALLORO",
            "first_name": "STEFANO",
            "year_of_birth": 1969,
            // [...]
            "e_mail": null,
            "nickname": "",
            "associated_user_id": 1,
            "gender_type_id": 1,
            // [...]
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2014-10-19T16:04:16.000Z",
            "complete_name": "ALLORO STEFANO",
            "is_year_guessed": false,

            // Embedded associated User:
            "associated_user": {
                "id": 1,
                "name": "steve",
                "description": "Stefano Alloro",
                "swimmer_id": 142,
                "last_name": "Alloro",
                "first_name": "Stefano",
                "year_of_birth": 1969,
                // [...]
            },

            // Embedded associated GenderType:
            "gender_type": {
                "id": 1,
                "code": "M",
                // [...]
            }
        }

+ Request ID not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request JWT missing (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



# Group team

## Team [/api/v1/team/{id}]

### Team details [GET]
The Team instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `City`
- `TeamAffiliation`, list of rows found for the last 2 most recent Seasons
- `Badge`, as above, list of rows found for the selected TeamAffiliations

A valid JWT value is required for the `Authorization` request header.

+ Parameters
    + id (number) - Team ID

+ Request ok (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "id": 1,
            // [...]
            "created_at": "2014-10-19T00:00:00.000Z",
            "updated_at": "2014-10-19T16:04:16.000Z",
            "name": "CSI NUOTO OBER FERRARI ASD",
            "editable_name": "CSI NUOTO OBER FERRARI ASD",
            "address": "Team HQ address",
            "zip": "",
            "phone_mobile": "",
            "phone_number": "",
            "fax_number": null,
            "e_mail": "contact.email@this.is.just.a.fake.domain.com",
            "contact_name": "Marco Ligabue",
            "notes": "whatever the team manager needs to write here",
            "name_variations": null,
            "city_id": 37,
            // [...]
            "home_page_url": "",

            // Embedded associated City:
            "city": {
                "id": 37,
                // [...]
                "name": "REGGIO NELL'EMILIA",
                "zip": "?",
                "area": "REGGIO EMILIA",
                "country": "Italy",
                "country_code": "ITA",
                // [...]
            },

            // "Recent Badges" found from last 2 most recent Seasons:
            // (as of this writing, season 191 & season 192)
            "badges": [
                {
                    "id": 124914,
                    // [...]
                    "number": "43446",
                    "season_id": 192,
                    "swimmer_id": 142,
                    "team_id": 1,
                    "category_type_id": 1293,
                    // [...]
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5726,
                    "final_rank": null,
                    "is_out_of_goggle_cup": false,
                    "has_to_pay_fees": true,
                    "has_to_pay_badge": false,
                    "has_to_pay_relays": true
                },
                // [...season 192 badges...]
                {
                    "id": 124947,
                    // [...]
                    "number": "04204788",
                    "season_id": 191,
                    "swimmer_id": 142,
                    "team_id": 1,
                    "category_type_id": 1320,
                    // [...]
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5727,
                    "final_rank": null,
                    "is_out_of_goggle_cup": false,
                    "has_to_pay_fees": false,
                    "has_to_pay_badge": false,
                    "has_to_pay_relays": false
                },
                // [...season 191 badges...]
            ],

            // Last 2 most recent affiliations (season 191 & season 192):
            "team_affiliations": [
                {
                    "id": 5727,
                    // [...]
                    "number": "04200002",
                    "name": "CSInuoto OberFerrari",
                    "must_calculate_goggle_cup": true,
                    "team_id": 1,
                    "season_id": 191,
                    "user_id": 2,
                    // [...]
                    "is_autofilled": false
                },
                {
                    "id": 5726,
                    // [...]
                    "number": "46103",
                    "name": "CSI NUOTO OBER FERRARI",
                    "must_calculate_goggle_cup": true,
                    "team_id": 1,
                    "season_id": 192,
                    // [...]
                    "is_autofilled": false
                }
            ]
        }

+ Request ID not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request JWT missing (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



# Group team_affiliation

## TeamAffiliation [/api/v1/team_affiliation/{id}]

### TeamAffiliation details [GET]
The TeamAffiliation instance matching the specified `id` returned as JSON.

The returned result includes these other 1st-level linked entities:
- `Team`
- `Season`
- `Badge`, _full list_ from the linked Season

A valid JWT value is required for the `Authorization` request header.

+ Parameters
    + id (number) - TeamAffiliation ID

+ Request ok (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "id": 5727,
            // [...]
            "number": "04200002",
            "name": "CSInuoto OberFerrari",
            "must_calculate_goggle_cup": true,
            "team_id": 1,
            "season_id": 191,
            // [...]
            "created_at": "2019-10-16T00:00:00.000Z",
            "updated_at": "2019-10-16T00:00:00.000Z",
            "is_autofilled": false,

            // Embedded associated Team:
            "team": {
                "id": 1,
                // [...]
                "name": "CSI NUOTO OBER FERRARI ASD",
                "editable_name": "CSI NUOTO OBER FERRARI ASD",
                "address": "Team HQ address",
                "zip": "",
                "phone_mobile": "",
                "phone_number": "",
                "fax_number": null,
                "e_mail": "contact.email@this.is.just.a.fake.domain.com",
                "contact_name": "Marco Ligabue",
                "notes": "whatever the team manager needs to write here",
                "name_variations": null,
                "city_id": 37,
                "created_at": "2014-10-19T00:00:00.000Z",
                "updated_at": "2019-02-17T10:26:36.000Z",
                // [...]
                "home_page_url": ""
            },

            // Embedded associated Season:
            "season": {
                "id": 191,
                "lock_version": 0,
                "description": "Circuito regionale Emilia master CSI 2019/2020",
                "begin_date": "2019-10-01",
                "end_date": "2020-09-30",
                "season_type_id": 2,
                "created_at": "2019-10-16T07:20:51.000Z",
                "updated_at": "2019-10-16T07:20:51.000Z",
                "header_year": "2019/2020",
                "edition": 20,
                "edition_type_id": 5,
                "timing_type_id": 2,
                "rules": null,
                "has_individual_rank": true,
                "badge_fee": "10.0"
            },

            // Embedded Badges (all) from the associated Season:
            "badges": [
                {
                    "id": 124947,
                    "lock_version": 0,
                    "number": "04204788",
                    "season_id": 191,
                    "swimmer_id": 142,
                    "team_id": 1,
                    "category_type_id": 1320,
                    "user_id": 1,
                    "created_at": "2019-10-16T00:00:00.000Z",
                    "updated_at": "2019-10-16T00:00:00.000Z",
                    "entry_time_type_id": 5,
                    "team_affiliation_id": 5727,
                    "final_rank": null,
                    "is_out_of_goggle_cup": false,
                    "has_to_pay_fees": false,
                    "has_to_pay_badge": false,
                    "has_to_pay_relays": false
                },
                // [...season 191 badges...]
            ]
        }

+ Request ID not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request JWT missing (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }



# Group user

## User [/api/v1/user/{id}]

### User details [GET]
The User instance matching the specified `id` returned as JSON.

A valid JWT value is required for the `Authorization` request header.

+ Parameters
    + id (number) - User ID

+ Request ok (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "steve",
            "description": "Stefano Alloro",
            "swimmer_id": 142,
            "created_at": "2013-10-23T17:10:00.000Z",
            "updated_at": "2020-02-09T18:17:29.000Z",
            // [...]
            "email": "steve.alloro@not.an.actual.domain.com",
            // [...]
            "last_name": "Alloro",
            "first_name": "Stefano",
            "year_of_birth": 1969,
            // [...]
        }

+ Request ID not found (application/json)

    + Header

            Authorization: "Bearer VALID-SESSION-JWT"

+ Response 200 (application/json)

        null


+ Request bad JWT (application/json)

    + Header

            Authorization: "Bearer BAD-OR-EXPIRED-JWT"

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Invalid JWT token"

    + Body

            { "msg": "Unauthorized" }

+ Request JWT missing (application/json)

+ Response 401 (application/json)

    + Header

            X-Error-Detail: "Missing JWT token"

    + Body

            { "msg": "Unauthorized" }
